#!/usr/bin/env python3
import requests
import urllib3
import warnings
import random

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
warnings.filterwarnings("ignore")

class VulnerabilityModule:
    name = "base_module"
    description = "Base vulnerability module"
    risk = "low"
    REQUIRES_PROXY = False

    def __init__(self, target, session=None, timeout=15, debug=False, verbose=False,
                 proxy=None, aggressive=False, stealth=False, custom_payloads=None,
                 bypass_protection=False, **kwargs):
        self.target = target
        self.timeout = timeout
        self.debug = debug
        self.verbose = verbose
        self.proxy = proxy
        self.aggressive = aggressive
        self.stealth = stealth
        self.custom_payloads = custom_payloads or []
        self.bypass_protection = bypass_protection

        self.session = session or self._create_session()

        for key, value in kwargs.items():
            setattr(self, key, value)

    def _create_session(self):
        session = requests.Session()

        stealth_agents = [
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15',
            'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36',
            'Mozilla/5.0 (iPhone; CPU iPhone OS 14_6 like Mac OS X) AppleWebKit/605.1.15'
        ]

        headers = {
            'User-Agent': 'QX-Scanner/2.1',
            'Accept': '*/*',
            'Connection': 'keep-alive'
        }

        if self.stealth:
            headers.update({
                'User-Agent': random.choice(stealth_agents),
                'X-Forwarded-For': f'{random.randint(1, 255)}.{random.randint(1, 255)}.{random.randint(1, 255)}.{random.randint(1, 255)}',
                'X-Real-IP': f'{random.randint(1, 255)}.{random.randint(1, 255)}.{random.randint(1, 255)}.{random.randint(1, 255)}'
            })

        if self.bypass_protection:
            headers.update({
                'Accept-Language': 'en-US,en;q=0.5',
                'Accept-Encoding': 'gzip, deflate',
                'Upgrade-Insecure-Requests': '1',
                'Cache-Control': 'max-age=0'
            })

        session.headers.update(headers)

        if self.proxy:
            session.proxies = {
                'http': self.proxy,
                'https': self.proxy
            }

        session.verify = not self.bypass_protection

        return session

    @staticmethod
    def standard_result(ok, risk="low", evidence=None, notes=""):
        return {
            "ok": ok,
            "risk": risk,
            "evidence": evidence or [],
            "notes": notes
        }

    def scan(self):
        return self.standard_result(True, "low", [], "Base scan method - override in child classes")

    def run(self):
        return self.scan()
